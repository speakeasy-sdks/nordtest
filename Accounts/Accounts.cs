
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Accounts
{
    using Accounts.Models.Shared;
    using Accounts.Utils;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Accounts API: Nordea Account Information Services API v5
    /// </summary>
    public interface IAccounts
    {

        /// <summary>
        /// Customer accounts
        /// </summary>
        public ICustomerAccounts CustomerAccounts { get; }
    }
    
    public class SDKConfig
    {
    }

    /// <summary>
    /// Accounts API: Nordea Account Information Services API v5
    /// </summary>
    public class Accounts: IAccounts
    {
        public SDKConfig Config { get; private set; }
        public static List<string> ServerList = new List<string>()
        {
            "https:////api.nordeaopenbanking.com/personal/",
        };

        private const string _language = "csharp";
        private const string _sdkVersion = "0.3.0";
        private const string _sdkGenVersion = "2.181.1";
        private const string _openapiDocVersion = "5.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.3.0 2.181.1 5.0 accounts";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;
        public ICustomerAccounts CustomerAccounts { get; private set; }

        public Accounts(Security? security = null, string? serverUrl = null, ISpeakeasyHttpClient? client = null)
        {
            _serverUrl = serverUrl ?? Accounts.ServerList[0];

            _defaultClient = new SpeakeasyHttpClient(client);
            _securityClient = _defaultClient;
            
            if(security != null)
            {
                _securityClient = SecuritySerializer.Apply(_defaultClient, security);
            }
            
            Config = new SDKConfig()
            {
            };

            CustomerAccounts = new CustomerAccounts(_defaultClient, _securityClient, _serverUrl, Config);
        }
    }
}